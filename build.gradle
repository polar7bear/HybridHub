plugins {
	id 'java'
	id 'groovy'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.pharmago'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// test
	testImplementation('org.spockframework:spock-core:2.3-groovy-4.0')
	testImplementation('org.spockframework:spock-spring:2.3-groovy-4.0')

	// test container
	testImplementation 'org.testcontainers:spock:1.17.1'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
	testImplementation 'org.testcontainers:mariadb:1.17.1'


	// 런타임에 클래스 기반 spock mock을 만들기 위해서 필요
	testImplementation('net.bytebuddy:byte-buddy:1.14.4')

	// spring retry
	implementation 'org.springframework.retry:spring-retry'

	//mock webserver
	testImplementation 'com.squareup.okhttp3:okhttp:4.10.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = 'app.jar'
}
